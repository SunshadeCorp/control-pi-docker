# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Import themes
frontend:    
  themes: !include_dir_merge_named themes

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
# telegram: !include telegram.yaml

mqtt:
  # certificate: "path/to/cert.crt"
  broker: mosquitto
  port: 1883
  username: !secret mqtt_user
  password: !secret mqtt_password

recorder:
  db_url: !secret recorder_db_url
  # db_url: sqlite:////data/home-assistant_v2.db

binary_sensor services:
  - name: Can Service Active
    payload_off: 'stopped'
    payload_on: 'running'
    platform: mqtt
    state_topic: master/can
    unique_id: service.can_active
  - name: Can Service
    payload_off: 'offline'
    payload_on: 'online'
    platform: mqtt
    state_topic: master/can/available
    unique_id: service.can
  - name: Relay Service
    payload_off: 'offline'
    payload_on: 'online'
    platform: mqtt
    state_topic: master/relays/available
    unique_id: service.relay
  - name: Master Service
    payload_off: 'offline'
    payload_on: 'online'
    platform: mqtt
    state_topic: master/core/available
    unique_id: service.master
  - name: Modbus Service
    payload_off: 'offline'
    payload_on: 'online'
    platform: mqtt
    state_topic: modbus4mqtt/available
    unique_id: service.modbus

binary_sensor kill_switch:
  - name: Kill Switch
    payload_off: 'released'
    payload_on: 'pressed'
    platform: mqtt
    state_topic: master/relays/kill_switch
    unique_id: relay.kill_switch

# switch precharge:
#  - command_topic: master/relays/perform_precharge
#    name: Battery Precharge
#    platform: mqtt
#    state_off: 'off'
#    state_on: 'on'
#    state_topic: master/relays/2
#    unique_id: relay.battery_precharge

sensor master:
  - device_class: power
    name: master_battery_power
    platform: mqtt
    state_topic: master/core/system_power
    unique_id: master_battery_power
    unit_of_measurement: W

switch relays: !include mqtt_relay_switches.yaml

binary_sensor esp-modules: !include mqtt_esp_modules.yaml

binary_sensor modbus4mqtt: !include modbus4mqtt_binary_sensor.yaml
sensor modbus4mqtt: !include modbus4mqtt_sensor.yaml

template:
  - sensor:
    - name: "Tesla Card Grid Consumption"
      unique_id: 'tesla_card_grid_consumption'
      state: >
        {% set export_power = int(states('sensor.sungrow_export_power'), 0) %}
        {{ -export_power if export_power < 0 else 0 }}"
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Grid Feed In"
      unique_id: 'tesla_card_grid_feed_in'
      state: > 
        {% set var = int(states('sensor.sungrow_export_power'), 0) %}
        {{ var if var > 0 else 0 }}"
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Battery Consumption"
      unique_id: 'tesla_card_battery_consumption'
      state: >
        {% if is_state('binary_sensor.running_state_battery_discharging', 'on') %}
          {{ states('sensor.sungrow_battery_power') | int(default=0) }}
        {% else %}
          0
        {% endif %}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Battery Charging Power"
      unique_id: 'tesla_card_battery_charging_power'
      state: >
        {% if is_state('binary_sensor.running_state_battery_charging', 'on') %}
          {{ states('sensor.sungrow_battery_power') | int(default=0) }}
        {% else %}
          0
        {% endif %}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Grid To House"
      unique_id: 'tesla_card_grid_to_house'
      state: >
        {% set grid_consumption = int(states('sensor.tesla_card_grid_consumption'), 0) %}
        {% set active_power = int(states('sensor.sungrow_total_active_power'), 0) %}
        {% set grid_to_house = grid_consumption - active_power %}
        {{ -grid_to_house if grid_to_house < 0 else 0 }}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Grid To Battery"
      unique_id: 'tesla_card_grid_to_battery'
      state: >
         {% set grid_consumption = int(states('sensor.tesla_card_grid_consumption'), 0) %}
         {% set load_power = int(states('sensor.sungrow_load_power'), 0) %}
         {% set grid_to_battery =  grid_consumption - load_power %}
         {{ grid_to_battery if grid_to_battery > 0 else 0 }}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Generation To Grid"
      unique_id: 'tesla_card_generation_to_grid'
      state: >
        {% set total_dc_power = int(states('sensor.sungrow_total_dc_power'), 0) %}
        {% set load_power = int(states('sensor.sungrow_load_power'), 0) %}
        {% set battery_charging_power = int(states('sensor.tesla_card_battery_charging_power'), 0) %}
        {% set generation_to_grid = total_dc_power - load_power - battery_charging_power %}
        {{ generation_to_grid if generation_to_grid > 0 else 0 }}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Generation To Battery"
      unique_id: 'tesla_card_generation_to_battery'
      state: >
        {% set total_dc_power = int(states('sensor.sungrow_total_dc_power'), 0) %}
        {% set load_power = int(states('sensor.sungrow_load_power'), 0) %}
        {% set grid_feed_in = int(states('sensor.tesla_card_grid_feed_in'), 0) %}
        {% set generation_to_battery = total_dc_power - load_power - grid_feed_in %}
        {{ generation_to_battery if generation_to_battery > 0 else 0 }}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Generation To House"
      unique_id: 'tesla_card_generation_to_house'
      state: >
        {% set total_dc_power = int(states('sensor.sungrow_total_dc_power'), 0) %}
        {% set battery_charging_power = int(states('sensor.tesla_card_battery_charging_power'), 0) %}
        {% set grid_feed_in = int(states('sensor.tesla_card_grid_feed_in'), 0) %}
        {% set generation_to_house = total_dc_power - battery_charging_power - grid_feed_in %}
        {{ generation_to_house if generation_to_house > 0 else 0 }}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Battery To House"
      unique_id: 'tesla_card_battery_to_house'
      state: >
        {% set battery_consumption = int(states('sensor.tesla_card_battery_consumption'), 0) %}
        {% set grid_feed_in = int(states('sensor.tesla_card_grid_feed_in'), 0) %}
        {% set battery_to_house = battery_consumption - grid_feed_in %}
        {{ battery_to_house if battery_to_house > 0 else 0 }}
      device_class: power
      unit_of_measurement: W

    - name: "Tesla Card Battery To Grid"
      unique_id: 'tesla_card_battery_to_grid'
      state: >
        {% set battery_consumption = int(states('sensor.tesla_card_battery_consumption'), 0) %}
        {% set load_power = int(states('sensor.sungrow_load_power'), 0) %}
        {% set battery_to_grid = battery_consumption - load_power %}
        {{ battery_to_grid if battery_to_grid > 0 else 0 }}
      device_class: power
      unit_of_measurement: W

    - name: MPPT1 Power
      unique_id: mppt1_power
      state: >
        {% set mppt1_current = float(states('sensor.sungrow_mppt1_current'), 0.0) %}
        {% set mppt1_voltage = float(states('sensor.sungrow_mppt1_voltage'), 0.0) %}
        {{ mppt1_current * mppt1_voltage | float(default=0.0) | round }}
      device_class: power
      unit_of_measurement: W
